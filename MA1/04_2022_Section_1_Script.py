# -*- coding: utf-8 -*-
"""MA1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DnNvPPWQzfYl6ffPxtcJ9v3Xku-bbNBG

# Mandatory Assingment 1

# Introduction
"""

# Import Libaries

"""# Section 1

## Question 1
### Assignment on control structures
"""

#Input
hundred_digit_str = int('7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843')
hundred_digit_number = int(hundred_digit_str)
print(hundred_digit_number)

hundred_digit_list = [int(x) for x in str(hundred_digit_number)]
print(hundred_digit_list)

str(hundred_digit_number)

# Solution for question 1:

#transformation of given number into list
hundred_digit_list = [int(x) for x in str(hundred_digit_number)]


#initilisation of length as limit, counter as 3 to reach limit in the end and highest product as well as components of it
length = len(hundred_digit_list)
counter = 3
highest_product = 0
first = 0
second = 0
third = 0
fourth = 0


while counter < length:
  product = hundred_digit_list[counter] * hundred_digit_list[counter - 1] * hundred_digit_list[counter - 2] * hundred_digit_list[counter - 3]
  #highest product gets calculated as well as components get saved
  if  product > highest_product:
    highest_product = product
    first = hundred_digit_list[counter - 3]
    second = hundred_digit_list[counter - 2]
    third = hundred_digit_list[counter - 1]
    fourth = hundred_digit_list[counter]
    counter += 1
  else:
    counter += 1

print("The highest possible product is " + str(highest_product) + " and conists of " \
      + str(first) + ", " + str(second) + ", " + str(third) + ", " + str(fourth))

"ccgatcahctatttaaaaccctatcatastadfa"[::-1]

"""**Question 2**"""

list_01 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
#Initilisation of list of even and uneven numbers

list_even = []
list_odd = []

for x in list_01:
  if list_01[x - 1] % 2 == 0:
    list_even.append(list_01[x - 1])
  else:
    list_odd.append(list_01[x - 1])

print('The even numbers in the given list are ' + str(list_even))
print('The odd numbers in the given list are ' + str(list_odd))

"""**Question 3**"""

def reverse(string):
    if len(string) == 0:
        return string
    else:
        return reverse(string[1:]) + string[0]
a = str(input("Enter the string to be reversed: "))
print(reverse(a))

def turn_around(to_be_reversed):
 
 #read in string and initilize counter
 to_be_reversed_list = list(to_be_reversed)
 back_to_front = []
 subtractor = 1
 boundaries = len(to_be_reversed)

 while subtractor < boundaries + 1:
   back_to_front.append(to_be_reversed_list[boundaries - subtractor])
   subtractor += 1
   
 back_to_front = ''.join(back_to_front)
 print(str(back_to_front))

turn_around('copenhagen')

"""**Question 4 a**"""

import math

def question_4(word, input_str):
  dict_for_word = {}
  word_to_have={}

  for letter in word:
    if letter in dict_for_word:
      word_to_have[letter] += 1
    else:
      dict_for_word[letter] = 0
      word_to_have[letter] = 1
 
  for letter in input_str:
    if letter in dict_for_word:
      dict_for_word[letter] += 1
    else:
      continue
  
  for key in dict_for_word:
    dict_for_word[key] = dict_for_word[key]/word_to_have[key]
  #for letter in input_str
  return print(f'You can construct {word} {math.floor(min(dict_for_word.values()))} times')

question_4('cat', "ccgatcahctatttaaaaccctatcatastadfa")

test = {'a': 0}

test['a']

"""**Question 5**"""

import re

def string_manipulator(string, separator):
  #splitting string into list based between ' '
  string_list = string.split(' ')
  #join list items to one string
  string_list = ''.join(string_list)
  #split into numbers and characters
  string_list = re.split('(\d+)', string_list)
  print(string_list)
  length = len(string_list)
  counter = 0
  numbers_list = []
  
  while counter < length:
    if string_list[counter].isdigit():
      numbers_list.append(string_list[counter])
      string_list[counter] = separator
      counter += 1
    else:
      counter += 1

  string_list = ''.join(string_list)
  string_list = string_list.replace(',','')
  numbers_list = separator.join(numbers_list)

  final_tuple = tuple([string_list] + [numbers_list])

  print(final_tuple)

string_manipulator("Copenhagen hosted Cop-09 summit at Bella Centre in 2009, which was attended by delegates from more than 100 countries","_")